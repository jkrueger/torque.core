;; -*- mode: clojure; eval: (paredit-mode 1);-*-

(ns torque.string)

(def libc (so* "c"))

(def ^:private isspace (import* libc isspace :sint32 (:sint32)))
(def ^:private isalnum (import* libc isalnum :sint32 (:sint32)))
(def ^:private isdigit (import* libc isdigit :sint32 (:sint32)))

(def strtoll (import* libc strtoll :sint64 (:ptr ^:out :ptr :sint32)))

(defn whitespace? [x]
  (== (isspace x) 1))

(defn alpha-numeric? [x]
  (== (isalnum x) 1))

(defn digit? [x]
  (== (isdigit x) 1))

(defn parse-int [s]
  (if (and s (or (string? s) (binary? s)))
    (let [start (-intptr (-bytes s))
          end   0
          res   (strtoll start end 0)]
      (when-not (= start end)
        res))
    (parse-int (str s))))

(defn at [s n]
  #?(:rev
     ;; during bootstrap stings are always of width 1
     (bget (-bytes s) n)
     ;; default implementation constructs char codes from
     ;; string with a specific byte width
     :default
     (let [width (. s width)
           data  (. s data)]
       ;; FIXME: this ignores endinaess. we need a general solution for
       ;; this. maybe it would be nice to have an endianess aware loop
       ;; construct
       (loop [out 0
              i   0]
         (if (< i width)
           (recur (bit-or out
                          (bit-shift-left
                            (bget data (+ n i))
                            i))
                  (inc i))
           out)))))
