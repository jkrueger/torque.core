;; -*- mode: clojure;-*-

(ns torque.core
  (:inherit
    [torque.lang.protocols]
    [torque.lang.boot]
    [torque.lang.limits]
    [torque.lang.string]
    [torque.lang.cons]
    [torque.lang.list]
    [torque.lang.exceptions]
    [torque.lang.flow]
    [torque.lang.let]
    [torque.lang.def]
    [torque.lang.lazy]
    [torque.lang.seq]
    [torque.lang.indexed]
    [torque.lang.chunked]
    [torque.lang.vector]
    [torque.lang.map]
    [torque.lang.squote]
    [torque.lang.predicates]
    [torque.lang.algo]
    [torque.lang.symbol]
    [torque.lang.keyword]
    [torque.lang.arrows]
    [torque.lang.set]
    [torque.lang.range]
    [torque.lang.meta]
    [torque.lang.atom]
    [torque.lang.hierarchy]
    [torque.lang.multimethod]
    [torque.lang.binary]
    [torque.lang.resource]
    [torque.lang.debug]
    [torque.lang.destructure]))

(defn println [& args]
  (print (apply str (interpose " " args))))

(defn ^:dynamic ns-resolve
  "Returns the var to which a symbol will be resolved in the
  namespace , else nil.  Note that if the symbol is fully qualified,
  the var to which it resolves need not be present in the namespace."
  [ns sym]
  (torque.core.builtin/ns-resolve ns sym))

(defn resolve
  "Same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)"
  [sym]
  (ns-resolve *ns* sym))

(defn the-ns
  "If passed a namespace, returns it. Else, when passed a symbol,
   returns the namespace named by it, throwing an exception if not
   found."
  [x]
  (torque.core.builtin/the-ns x))
