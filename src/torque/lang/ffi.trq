(ns torque.lang.ffi
  (:require
   [torque.lang.boot :refer :all]
   [torque.lang.def :refer :all]
   [torque.lang.algo :refer :all]
   [torque.lang.symbol :refer :all]))

(defmacro so
  ([]
   `(so* 0))
  ([name]
   `(so* ~name)))

(defmacro import [lib sym]
  `(import* ~lib ~sym))

(defmacro defimport [name lib sym ret args]
  (let [syms (mapv (fn [x] (gensym "arg")) args)
        name (with-meta name {:private true})]
    `(let [ptr# (import ~lib ~sym)]
      (def ~name
        (fn ~name ~syms
          (invoke* ptr# ~ret ~args ~@syms))))))
