;; -*- mode: clojure; eval: (paredit-mode 1);-*-

(ns torque.lang.string
  (:use
    [torque.lang.protocols]
    [torque.lang.boot]))

(deftype String [data width length]

  IString

  IPrintable
  (-str [this] this)

  ISerializable
  (-bytes [o] data)

  IPointerTarget
  (-intptr [o] (-intptr data))

  ICounted
  (-count [_] length))

(def string?
  (fn* string? [x]
    (satisfies? IString x)))

(def string
  (fn* string [b]
    (new String b 1 (blength b))))

(def length
  (fn* [s]
    (. s length)))

(def maybe-str
  (fn* [s]
    (if s
      (if (satisfies? IPrintable s)
        (-str s)
        ;; TODO: print at least type name
        "<unprintable>")
      "nil")))

(def str
  (fn* [& args]
    (if (not (nil? args))
      (loop* [xs (-next args)
              b  (bytes (maybe-str (-first args)))]
        (if (not (nil? xs))
          (let* [x        (let* [fst (-first xs)]
                            (if (nil? fst)
                              "nil"
                              fst))
                 next-bin (binary b (bytes (maybe-str x)))]
            (recur (-next xs) next-bin))
          (string b)))
      "")))
