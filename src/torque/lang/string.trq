;; -*- mode: clojure; eval: (paredit-mode 1);-*-

(ns torque.lang.string
  (:require
    [torque.lang.protocols :refer :all]
    [torque.lang.boot :refer :all]))

(deftype String [data width length]

  IString

  IPrintable
  (-str [this] this)

  ISerializable
  (-bytes [o] data)

  IPointerTarget
  (-intptr [o] (-intptr data))

  ICounted
  (-count [o] length)

  IEquiv
  (-equiv [_ other]
    (if (instance? String other)
      (if (== length (-count other))
        (= data (-bytes other))
        false)
      false)))

(def string?
  (fn* string? [x]
    (satisfies? IString x)))

(def string
  (fn* string [b]
    (new String b 1 (blength b))))

(def length
  (fn* [s]
    (. s length)))

(def str
  (fn* [& xs]
    (if (nil? xs)
      ""
      (let* [len (alength xs)]
        (if (= len 1)
          (-str (aget xs 0))
          (loop* [idx 0]
            (if (< idx len)
              (let* [x (aget xs idx)]
                (aset xs idx (-str x))
                (recur (inc idx)))
              (string (binary* xs)))))))))
