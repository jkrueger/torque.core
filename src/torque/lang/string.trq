;; -*- mode: clojure; eval: (paredit-mode 1);-*-

(ns torque.lang.string
  (:require
    [torque.lang.protocols :refer :all]
    [torque.lang.boot :refer :all]))

(deftype String [data width length]

  IString

  IPrintable
  (-str [this] this)

  ISerializable
  (-bytes [o] data)

  IPointerTarget
  (-intptr [o] (-intptr data))

  ICounted
  (-count [o] length))

(def string?
  (fn* string? [x]
    (satisfies? IString x)))

(def string
  (fn* string [b]
    (new String b 1 (blength b))))

(def length
  (fn* [s]
    (. s length)))

;; (def str
;;   (fn* [& args]
;;     (if (not (nil? args))
;;       (loop* [xs (-next args)
;;               b  (bytes (-str (-first args)))]
;;         (if (not (nil? xs))
;;           (let* [x        (let* [fst (-first xs)]
;;                             (if fst
;;                               fst
;;                               "nil"))
;;                  next-bin (binary b (bytes (-str x)))]
;;             (recur (-next xs) next-bin))
;;           (string b)))
;;       "")))
