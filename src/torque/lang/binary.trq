(ns torque.lang.binary
  (:require
    [torque.lang.binary.util :refer :all]
    [torque.lang.binary.le :as le]
    [torque.lang.binary.be :as be]
    [torque.lang.algo :refer :all]
    [torque.lang.ffi :as ffi]))

(def ^:private libc (ffi/so "c"))

(ffi/defimport memcpy libc memcpy :ptr [:ptr :ptr :sint64])
(ffi/defimport bcmp libc bcmp :ptr [:ptr :ptr :sint64])

;; (deftype Binary [size data]

;;   IPrintable
;;   (-str [_]
;;     "#<binary>")

;;   IPointerTarget
;;   (-intptr [this] data))

(defn get-byte [b offset]
  (bget b offset))

(defn get-int8
  "Get a 8 bit signed integer in host byte order at offset"
  [b offset]
  (if (< offset (blength b))
    (if (signed? b)
      (bit-or -127 (bget b offset))
      (bget b offset))
    (throw-binary-width b offset 1)))

(defn get-int16
  "Get a 16 bit signed integer in host byte order at offset"
  [b offset]
  #?(:byte-order/lsb (le/get-int16 b offset)
     :byte-order/msb (be/get-int16 b offset)))

(defn get-int32
  "Get a 32 bit signed integer in host byte order at offset"
  [b offset]
  #?(:byte-order/lsb (le/get-int32 b offset)
     :byte-order/msb (be/get-int32 b offset)))

(defn get-int64
  "Get a 64 bit signed integer in host byte order at offset"
  [b offset]
  #?(:byte-order/lsb (le/get-int64 b offset)
     :byte-order/msb (be/get-int64 b offset)))

(def get-uint8 get-byte)

(defn get-uint16
  "Get a 16 bit unsigned integer in host byte order at offset"
  [b offset]
  #?(:byte-order/lsb (le/get-uint16 b offset)
     :byte-order/msb (be/get-uint16 b offset)))

(defn get-uint32
  "Get a 32 bit unsigned integer in host byte order at offset"
  [b offset]
  #?(:byte-order/lsb (le/get-uint32 b offset)
     :byte-order/msb (be/get-uint32 b offset)))

(defn subb [b start end]
  (let [length (- end start)]
    (if (<= length (blength b))
      (let [out (make-binary length)]
        (memcpy (intptr out) (+ (intptr b) start) length)
        out)
      (throw-binary-width b start length))))

;; TODO: this should have an extra parameter to read a string
;; in any supported encoding
(defn get-string
  "Get a zero terminated C string of at most max bytes
   starting at offset"
  [b offset max]
  (let [length (blength b)
        max    (if (< length max) length max)]
    (if (< offset length)
      (loop [n offset]
        (if (< n max)
          (let [x (bget b n)]
            (if (== x 0)
              (string (subb b offset n))
              (recur (inc n))))
          (string (subb b offset n))))
      (throw-binary-width b offset length))))

(defn bcompare
  "Compare to binaries, returning true if the bytes b's bytes
   are identical to a' bytes at off.
   If off + (blength b) > (blength a) false is returned"
  ([a b]
   (bcompare a b 0))
  ([a b off]
   (if (and a b)
     (if (<= (+ (blength b) off) (blength a))
       (== (bcmp (+ (intptr a) off) (intptr b) (blength a)) 0)
       false))
   ;; TODO: throw invalid arg
   ))
