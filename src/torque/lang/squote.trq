;; -*- mode: clojure; eval: (paredit-mode 1);-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.squote
  (:use
   [torque.lang.protocols]
   [torque.lang.boot]
   [torque.lang.seq]
   [torque.lang.chunked]))

;; This is in its own namespace, since providing apply and concat enables
;; syntax quotes, which are then used in all the code past this point

(defn ^:private collect [xs]
  (if-let [ys (next xs)]
    (cons (first xs) (collect ys))
    (seq (first xs))))

(defn apply [f & args]
  (apply* f (collect args)))

(defn cat [xys zs]
  (lazy-seq
    (let [s (seq xys)]
      (if s
        (if (chunked-seq? s)
          (chunk-cons (chunk-first s) (cat (chunk-rest s) zs))
          (cons (first s) (cat (rest s) zs)))
        (when zs
          (cat (first zs) (next zs)))))))

(defn concat
  ([]
   (lazy-seq nil))
  ([x]
   (lazy-seq x))
  ([x y]
   (lazy-seq
     (let [s (seq x)]
       (if s
         (if (chunked-seq? s)
           (chunk-cons (chunk-first s) (concat (chunk-rest s) y))
           (cons (first s) (concat (rest s) y)))
         y))))
  ([x y & zs]
   (cat (concat x y) zs)))
