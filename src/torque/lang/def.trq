;; -*- mode: clojure;-*-

(ns torque.lang.def
  (:use
    [torque.lang.protocols]
    [torque.lang.boot]
    [torque.lang.list]
    [torque.lang.let]
    [torque.lang.keyword]))

;; This defones the fn macro for the first time as a simple forward to
;; fn*. Later on this will be redefined with destructuring and other
;; goodies
(def ^:macro fn
  (fn* fn [& fdecl]
    (cons 'fn* fdecl)))

(def ^:macro defn
  (fn defn [name & fdecl]
    ;; TODO: parse all meta information and attach to
    ;; function definition
    (let [doc   (when (string? (-first fdecl))
                  (-first fdecl))
          fdecl (if doc (-rest fdecl) fdecl)
          m     (-conj
                  {:name name}
                  (when doc {:doc doc}))]
      (list 'def name
        (cons 'fn (cons name fdecl))))))

(def ^:macro defmacro
  (fn [name & decl]
    (let [doc   (when (string? (-first decl))
                 (-first decl))
          decl (if doc (-rest decl) decl)
          m     (-conj {:macro true}
                   (when doc {:doc doc}))]
      (list 'def (with-meta name m)
            (cons 'fn (cons name decl))))))

(defmacro declare [& names]
  (cons 'do
        (loop [xs    names
               forms (empty-list)]
          (if xs
            (recur (-next xs)
                   (cons (list 'def (-first xs))
                         forms))
            forms))))
