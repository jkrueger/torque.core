;; -*- mode: clojure;-*-

(ns torque.lang.predicates
  (:use
    [torque.lang.protocols]
    [torque.lang.boot]
    [torque.lang.def]
    [torque.lang.let]))

(defn number? [x]
  (integer? x))

(defn coll? [x]
  (satisfies? ICollection x))

(defn set? [x]
  (satisfies? ISet x))

(defn associative? [x]
  (satisfies? IAssociative x))

(defn sorted? [x]
  (satisfies? ISorted x))

(defn seqable? [x]
  (satisfies? ISeqable x))

(defn reduceable? [x]
  (satisfies? IReduce x))

(defn list? [x]
  (satisfies? AList x))

(defn map? [x]
  (satisfies? IMap x))

(defn chunked-seq? [x]
  (satisfies? IChunkedSeq x))

(defn record? [x]
  (satisfies? IRecord x))

(defn indexed? [x]
  (satisfies? IIndexed x))

(defn counted? [x]
  (satisfies? ICounted x))

(def ^:macro and
  (fn and
    ([]  true)
    ([x] x)
    ([x & next]
     `(let [and# ~x]
        (if and# (and ~@next) and#)))))

(def ^:macro or
  (fn or
    ([]  nil)
    ([x] x)
    ([x & xs]
     `(let [or# ~x]
        (if or# or# (or ~@xs))))))

(def ^:macro not=
  (fn [a b]
    `(not (= ~a ~b))))

(defn complement
  [f]
  (fn complement
    ([] (not (f)))
    ([x] (not (f x)))
    ([x y] (not (f x y)))
    ([x y & zs] (not (apply f x y zs)))))

(defn every?
  [pred coll]
  (cond
    (nil? (seq coll))
      true
    (pred (first coll))
      (recur pred (next coll))
    :else
      false))

(defn some
  [pred coll]
  (when (seq coll)
    (or (pred (first coll))
        (recur pred (next coll)))))
