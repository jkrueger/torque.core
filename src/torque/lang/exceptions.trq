(ns torque.lang.exceptions
  (:use
    [torque.lang.protocols]
    [torque.lang.boot]
    [torque.lang.string]
    [torque.lang.cons]))

(deftype ExceptionInfo [message data cause]

  IPrintable
  (-str [_] (str message (if data
                           (str "\n  " data)
                           ""))))

(def ex-info
  (fn* ex-info
    ([msg map]
     (new ExceptionInfo msg map nil))
    ([msg map cause]
     (new ExceptionInfo msg map cause))))

(def ex-message
  (fn* ex-message [ex]
    (if (instance? ExceptionInfo ex)
      (. ex message))))

(def ex-cause
  (fn* ex-cause
    [ex]
    (if (instance? ExceptionInfo ex)
      (. ex cause))))

(def ^:macro throw
  (fn* throw [x]
    (list 'throw* x)))

(def ^:macro try
  (fn* [& body]
    (if body
      (let* [forms (loop* [xs    body
                           forms '()]
                     (if (-next xs)
                       (recur (-next xs)
                              (cons (-first xs) forms))
                       [forms (-first xs)]))]
        ;; TODO: do try*/catch* once it's implemented
        (cons 'do (-nth forms 0))))))

;; TODO: add *assert* flag
;; (def ^:macro assert
;;   (fn* assert
;;     ([x]
;;      (if (not x)
;;        (throw
;;          (ex-info (str "Assertion error: " x)
;;                   {})))
;;     ([x msg]
;;      (if (not x)
;;        (throw
;;          (ex-info (str "Assertion error: "
;;                        ~msg "\n"
;;                        x)
;;                   {})))))))
