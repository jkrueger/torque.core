;; -*- mode: clojure; eval: (paredit-mode 1);-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.lazy
  (:require
    [torque.lang.protocols :refer :all]
    [torque.lang.boot :refer :all]
    [torque.lang.flow :refer :all]
    [torque.lang.def :refer :all]
    [torque.lang.indexed :refer :all]
    [torque.lang.common.seq :as seq]))

(defn sval [ls]
  (let* [f (. ls fn)]
    (when f
      (set! ls s (f))
      (set! ls fn nil)
      (. ls s))))

(deftype LazySeq [fn s]

  IPrintable
  (-str [this]
    (let [first (-first this)
          rest  (-rest this)]
      (str "("
           (loop* [s ""
                   f first
                   r (seq rest)]
                  (if r
                    (recur (str s f " ")
                           (-first r)
                           (-next r))
                    (str s f)))
           ")")))

  ISeq
  (-first [this]
    (-seq this)
    (when-not (nil? s)
      (-first s)))
  (-rest [this]
    (-seq this)
    (if-not (nil? s)
      (-rest s)
      ()))

  INext
  (-next [coll]
    (-seq coll)
    (when-not (nil? s)
      (-next s)))

  ISeqable
  (-seq [o]
    (sval o)
    (when-not (nil? s)
      (loop* [ls s]
        (if (instance? LazySeq ls)
          (recur (sval ls))
          (do
            (set! o s ls)
            (seq s)))))))

(defmacro lazy-seq [& body]
  (list 'new 'LazySeq
        (list 'fn* '[] (cons 'do (array-seq body)))
        'nil))
