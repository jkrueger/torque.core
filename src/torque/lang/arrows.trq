;; -*- mode: clojure; eval: (paredit-mode 1);-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.arrows
  (:require
    [torque.lang.protocols :refer :all]
    [torque.lang.boot :refer :all]
    [torque.lang.let :refer :all]
    [torque.lang.def :refer :all]
    [torque.lang.list :refer :all]
    [torque.lang.seq :refer :all]
    [torque.lang.predicates :refer :all]
    [torque.lang.algo :refer :all]))

(defmacro -> [x & forms]
  (loop [cur x
         fs  forms]
    (if fs
      (let [form     (first fs)
            threaded (if (seq? form)
                       (with-meta `(~(first form) ~cur ~@(next form))
                         (meta form))
                       (list form cur))]
        (recur threaded (next fs)))
      cur)))

(defmacro ->> [x & forms]
  (loop [cur x
         fs  forms]
    (if fs
      (let [form     (first fs)
            threaded (if (seq? form)
                       (with-meta `(~(first form) ~@(next form) ~cur)
                         (meta form))
                       (list form cur))]
        (recur threaded (next fs)))
      cur)))

;; (defmacro cond-> [expr & clauses]
;;   (let [g     (gensym)
;;         steps (map (fn [clause]
;;                      (let [test (first clause)
;;                            step (second clause)]
;;                        `(if ~test (-> ~g ~step) ~g)))
;;                    (partition 2 clauses))]
;;     `(let [~g ~expr
;;            ~@(interleave (repeat g) (butlast steps))]
;;        ~(if (empty? steps)
;;           g
;;           (last steps)))))

;; (defmacro cond->> [expr & clauses]
;;   ;;    (assert (even? (count clauses)))
;;   (let [g     (gensym)
;;         steps (map (fn [clause]
;;                      (let [test (first clause)
;;                            step (second clause)]
;;                        `(if ~test (->> ~g ~step) ~g)))
;;                    (partition 2 clauses))]
;;     `(let [~g ~expr
;;            ~@(interleave (repeat g) (butlast steps))]
;;        ~(if (empty? steps)
;;           g
;;           (last steps)))))

;; (defmacro as-> [expr name & forms]
;;   `(let [~name ~expr
;;          ~@(interleave (repeat name) forms)]
;;      ~name))

;; (defmacro some-> [expr & forms]
;;   (let [g     (gensym)
;;         pstep (fn [step] `(if (nil? ~g) nil (-> ~g ~step)))]
;;     `(let [~g ~expr
;;            ~@(interleave (repeat g) (map pstep forms))]
;;        ~g)))

;; (defmacro some->> [expr & forms]
;;   (let [g     (gensym)
;;         pstep (fn [step] `(if (nil? ~g) nil (->> ~g ~step)))]
;;     `(let [~g ~expr
;;            ~@(interleave (repeat g) (map pstep forms))]
;;        ~g)))
