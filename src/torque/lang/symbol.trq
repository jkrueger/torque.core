;; -*- mode: clojure; eval: (paredit-mode 1);-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.symbol
  (:use
    [torque.lang.protocols]
    [torque.lang.boot]
    [torque.lang.def]
    [torque.lang.atom]))

(defn symbol? [x]
  #?(:rev     (torque.core.builtin/symbol? x)
     :default (instance? Symbol x)))

(defn symbol [name]
  (new Symbol nil nil name name))

(defn name [x]
  (if (satisfies? INamed x)
    (-name x)
    (when (string? x)
      x)))

(defn namespace [x]
  (-namespace x))

(def ^:private gensym-counter (atom 0))

(defn gensym
  ([]
   (gensym "__SYM__"))
  ([prefix-string]
   (let [id  (swap! gensym-counter inc)
         fqn (str prefix-string id)]
     (symbol fqn))))
