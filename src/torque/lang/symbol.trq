;; -*- mode: clojure; eval: (paredit-mode 1);-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.symbol
  (:require
    [torque.lang.protocols :refer :all]
    [torque.lang.boot :refer :all]))

(deftype Symbol [meta namespace name fqn]

  IPrintable
  (-str [this] fqn)

  IWithMeta
  (-with-meta [_ meta]
    (new Symbol meta namespace name fqn))

  IMeta
  (-meta [_] meta)

  INamed
  (-name [_] name)
  (-namespace [_] namespace)

  IEquiv
  (-equiv [_ other]
    (if (instance? Symbol other)
      (if (= namespace (-namespace other))
        (= name (-name other))
        false)
      false)))

;; (def symbol?
;;   (fn* symbol? [x]
;;     #?(:rev     (torque.core.builtin/symbol? x)
;;        :default (instance? Symbol x))))

;; (def symbol?
;;   (fn* symbol? [x]
;;     (instance? Symbol x)))

(def symbol
  (fn* symbol [name]
    (new Symbol nil nil name name)))

;; (defn name [x]
;;   (if (satisfies? INamed x)
;;     (-name x)
;;     (when (string? x)
;;       x)))

;; (defn namespace [x]
;;   (-namespace x))
