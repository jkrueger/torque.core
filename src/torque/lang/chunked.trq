;; -*- mode: clojure;-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.chunked
  (:use
    [torque.lang.protocols]
    [torque.lang.boot]
    [torque.lang.let]
    [torque.lang.seq]))

(deftype ChunkedCons [chunk more meta]

  ;; IPrintable
  ;; (-str [_] "chunkedcons")

  ;; IEquiv
  ;; (-equiv [o other] (seq/equiv o other))

  IWithMeta
  (-with-meta [o meta]
    (new ChunkedCons chunk more meta))

  IMeta
  (-meta [o] meta)

  ISeqable
  (-seq [o] o)

  ISeq
  (-first [_]
    (-nth chunk 0))
  (-rest [_]
    (if (torque.core.builtin/> (-count chunk) 1)
      (new ChunkedCons (-drop-first chunk) more meta)
      (if (nil? more)
        ()
        more)))

  INext
  (-next [_]
    (if (torque.core.builtin/> (-count chunk) 1)
      (new ChunkedCons (-drop-first chunk) more meta)
      (let [more (-seq more)]
        (when-not (nil? more)
          more))))

  IChunkedSeq
  (-chunked-first [_] chunk)
  (-chunked-rest [_]
    (if (nil? more)
      ()
      more))

  IChunkedNext
  (-chunked-next [_]
    (if (nil? more)
      nil
      more))

  ICollection
  (-conj [this o]
    (cons o this)))

(defn chunk-cons [chunk rest]
  (if (= 0 (-count chunk))
    rest
    (new ChunkedCons chunk rest nil)))

(defn chunk [b]
  (. b -chunk))

(defn chunk-first [s]
  (-chunked-first s))

(defn chunk-rest [s]
  (-chunked-rest s))

(defn chunk-next [s]
  (if (satisfies? IChunkedNext s)
    (-chunked-next s)
    (seq (-chunked-rest s))))

(defn chunked-seq? [s]
  (satisfies? IChunkedSeq s))
