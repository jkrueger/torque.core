;; -*- mode: clojure;-*-

(ns torque.lang.let
  (:require
    [torque.lang.protocols :refer :all]
    [torque.lang.boot :refer :all]
    [torque.lang.list :refer :all]
    [torque.lang.cons :refer :all]))

(def ^:macro let
  (fn* let [& forms]
    (cons 'let* forms)))

(def ^:macro when-let
  (fn* when-let [binding & body]
    (list 'let [(-nth binding 0) (-nth binding 1)]
          (list 'if (-nth binding 0)
                (cons 'do body)
                nil))))

(def ^:macro if-let
  (fn* if-let [binding then else]
    (list 'let [(-nth binding 0) (-nth binding 1)]
          (list 'if (-nth binding 0)
                then
                else))))

(def ^:macro loop
  (fn* loop [& forms]
    (cons 'loop* forms)))

(def ^:macro binding
  (fn* loop [& forms]
    (cons 'binding* forms)))
