;; -*- mode: clojure; eval: (paredit-mode 1);-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.algo
  (:use
    [torque.lang.protocols]
    [torque.lang.boot]
    [torque.lang.cons]
    [torque.lang.list]
    [torque.lang.flow]
    [torque.lang.let]
    [torque.lang.def]
    [torque.lang.lazy]
    [torque.lang.seq]
    [torque.lang.indexed]
    [torque.lang.chunked]
    [torque.lang.vector]
    [torque.lang.map]
    [torque.lang.squote]
    [torque.lang.predicates]
    [torque.lang.symbol])
  (:require
    [torque.lang.common.seq :as seq]))

(def ^:macro dotimes
  "bindings => name n

  Repeatedly executes body (presumably for side-effects) with name
  bound to integers from 0 through n-1."
  (fn dotimes [binding & body]
    (let [i (-nth binding 0)
          n (-nth binding 1)]
      `(let* [n# ~n]
         (loop* [~i 0]
           (when (< ~i n#)
             ~@body
             (recur (inc ~i))))))))

(def ^:macro doseq
  "Repeatedly executes body (presumably for side-effects) with
  bindings and filtering as provided by \"for\".  Does not retain
  the head of the sequence. Returns nil."
  (fn doseq [binding & body]
    (let [elt (-nth binding 0)
          coll (-nth binding 1)]
      `(loop* [coll# (seq ~coll)]
              (when coll#
                (let [~elt (first coll#)]
                  ~@body
                  (recur (next coll#))))))))

(defn identity [x]
  x)

(defn constantly [x]
  (fn [& args] x))

(defn partial [f & fixed]
  (fn [& args]
    (apply f (concat fixed args))))

(defn not-empty
  [coll] (when (seq coll) coll))

(defn count [coll]
  (if-not (nil? coll)
    (if (satisfies? ICounted coll)
      (-count coll)
      (if (array? coll)
        (alength coll)
        (seq/count coll)))
    0))

(defn spread
  [arglist]
  (cond
    (nil? arglist) nil
    (nil? (next arglist)) (seq (first arglist))
    :else (cons (first arglist)
                (spread (next arglist)))))

(defn list*
  "Creates a new list containing the items prepended to the rest, the
  last of which will be treated as a sequence."
  ([args] (seq args))
  ([a args] (cons a args))
  ([a b args] (cons a (cons b args)))
  ([a b c args] (cons a (cons b (cons c args))))
  ([a b c d & more]
   (cons a (cons b (cons c (cons d (spread more)))))))

(defn comp
  ([] identity)
  ([f] f)
  ([f g]
   (fn
     ([] (f (g)))
     ([x] (f (g x)))
     ([x y] (f (g x y)))
     ([x y z] (f (g x y z)))
     ([x y z & args] (f (apply g x y z args)))))
  ([f g & fs]
   (seq/reduce comp (list* f g fs))))

(defn ^:private linear-traversal-nth
  ([coll n]
   (cond
     (nil? coll)     (throw (ex-info "Index out of bounds" {}))
     (zero? n)       (if (seq coll)
                       (first coll)
                       (throw (ex-info "Index out of bounds" {})))
     (indexed? coll) (-nth coll n)
     (seq coll)      (recur (next coll) (dec n))
     :else           (throw (ex-info "Index out of bounds" {}))))
  ([coll n not-found]
   (cond
     (nil? coll)     not-found
     (zero? n)       (if (seq coll)
                       (first coll)
                       not-found)
     (indexed? coll) (-nth coll n not-found)
     (seq coll)      (recur (next coll) (dec n) not-found)
     :else           not-found)))

(defn nth
  ([coll n]
   (if (satisfies? IIndexed coll)
     (-nth coll n)
     (linear-traversal-nth coll n)))
  ([coll n not-found]
   (if (satisfies? IIndexed coll)
     (-nth coll n not-found)
     (linear-traversal-nth coll n not-found))))

(defn conj
  ([] [])
  ([coll] coll)
  ([coll x]
   (-conj coll x))
  ([coll x & args]
   ;; FIXME: we don't support recur in variadic branches.
   ;; replace this with something nicer later on
    (loop [out (conj coll x)
           xs  args]
      (if xs
        (let [val (-first xs)]
          (recur (conj out val) (next xs)))
        out))))

(defn peek
  "For a list or queue, same as first, for a vector, same as, but much
  more efficient than, last. If the collection is empty, returns nil."
  [coll]
  (when-not (nil? coll)
    (-peek coll)))

(defn pop
  "For a list or queue, returns a new list/queue without the first
  item, for a vector, returns a new vector without the last item.
  Note - not the same as next/butlast."
  [coll]
  (when-not (nil? coll)
    (-pop coll)))

(defn filter
  ([pred coll]
   (lazy-seq
    (when-let [s (seq coll)]
      (if (chunked-seq? s)
        (let [c (chunk-first s)
              size (count c)
              b (chunk-buffer size)]
          (dotimes [i size]
            (when (pred (-nth c i))
              (chunk-append b (-nth c i))))
          (chunk-cons (chunk b) (filter pred (chunk-rest s))))
        (let [f (first s) r (rest s)]
          (if (pred f)
            (cons f (filter pred r))
            (filter pred r))))))))

(defn remove
  ([pred]
   (filter (complement pred)))
  ([pred coll]
   (filter (complement pred) coll)))

(defn map
  ([f coll]
   (lazy-seq
    (when-let [s (seq coll)]
      (if (chunked-seq? seq)
        (let [c    (chunk-first s)
              size (count c)
              b    (chunk-buffer size)]
          (loop [i 0]
            (when (< i size)
              (chunk-append b (f (-nth c i)))
              (recur (inc i))))
          (chunk-cons (chunk b) (map f (chunk-rest s))))
        (cons (f (first s)) (map f (rest s)))))))
  ([f c1 c2]
   (lazy-seq
    (let [s1 (seq c1)
          s2 (seq c2)]
      (when (and s1 s2)
        (cons (f (first s1) (first s2))
              (map f (rest s1) (rest s2))))))))

(defn mapcat
  ([f]
   (comp (map f) cat))
  ([f & colls]
   (apply concat (apply map f colls))))

(defn zipmap
  [keys vals]
  (loop [map {}
         ks  (seq keys)
         vs  (seq vals)]
    (if (and ks vs)
      (recur (assoc map (first ks) (first vs))
             (next ks)
             (next vs))
      map)))

(defn reduce
  ([f coll]
   (if (satisfies? IReduce coll)
     (-reduce coll f)
     (seq/reduce f coll)))
  ([f val coll]
   (if (satisfies? IReduce coll)
     (-reduce coll f val)
     (seq/reduce f val coll))))

(declare persistent! transient)

(defn into
  ([to from]
   (if-not (nil? to)
     (if (satisfies? IEditableCollection to)
       (with-meta (persistent! (reduce -conj! (transient to) from)) (meta to))
       (reduce -conj to from))
     (reduce conj () from))))

(defn mapv
  ([f coll]
   (reduce (fn [v o] (conj v (f o))) [] coll))
  ([f c1 c2]
   (into [] (map f c1 c2)))
  ([f c1 c2 c3]
   (into [] (map f c1 c2 c3)))
  ([f c1 c2 c3 & colls]
   (into [] (apply map f c1 c2 c3 colls))))

(defn butlast [s]
  (loop [ret [] s s]
    (if (next s)
      (recur (conj ret (first s)) (next s))
      (seq ret))))

(defn take [n coll]
  (lazy-seq
   (when (pos? n)
     (when-let [s (seq coll)]
       (cons (first s) (take (dec n) (rest s)))))))

(defn take-while [pred coll]
  (lazy-seq
   (when-let [s (seq coll)]
     (when (pred (first s))
       (cons (first s) (take-while pred (rest s)))))))

(defn drop [n coll]
  (let [step (fn [n coll]
               (let [s (seq coll)]
                 (if (and (pos? n) s)
                   (recur (dec n) (rest s))
                   s)))]
    (lazy-seq (step n coll))))

(defn drop-while [pred coll]
  (let [step (fn [pred coll]
               (let [s (seq coll)]
                 (if (and s (pred (first s)))
                   (recur pred (rest s))
                   s)))]
    (lazy-seq (step pred coll))))

(defn take-nth
  ([n coll]
   (lazy-seq
    (when-let [s (seq coll)]
      (cons (first s) (take-nth n (drop n s)))))))

(defn cycle [coll]
  (lazy-seq
   (when-let [s (seq coll)]
     (concat s (cycle s)))))

(defn split-at
  [n coll]
  [(take n coll) (drop n coll)])

(defn split-with
  [pred coll]
  [(take-while pred coll) (drop-while pred coll)])

(defn repeat
  ([x]
   (lazy-seq (cons x (repeat x))))
  ([n x]
   (take n (repeat x))))

(defn repeatedly
  "Takes a function of no args, presumably with side effects, and
  returns an infinite (or length n if supplied) lazy sequence of calls
  to it"
  ([f] (lazy-seq (cons (f) (repeatedly f))))
  ([n f] (take n (repeatedly f))))

(defn replicate
  [n x]
  (take n (repeat x)))

(defn iterate [f x]
  (cons x (lazy-seq (iterate f (f x)))))

(defn interleave
  ([c1 c2]
   (lazy-seq
    (let [s1 (seq c1) s2 (seq c2)]
      (when (and s1 s2)
        (let [step (interleave (rest s1) (rest s2))]
          (cons (first s1)
                (cons (first s2)
                      step)))))))
  ([c1 c2 & colls]
   (lazy-seq
    (let [ss (map seq (conj colls c2 c1))]
      (when (every? identity ss)
        (let [interleaved (apply interleave (map rest ss))]
          (concat (map first ss) interleaved)))))))

(defn interpose [sep coll]
  (drop 1 (interleave (repeat sep) coll)))

(defn partition
  ([n coll]
   (partition n n coll))
  ([n step coll]
   (lazy-seq
     (when-let [s (seq coll)]
       (let [p (take n s)]
         (when (== n (count p))
           (cons p (partition n step (drop step s))))))))
  ([n step pad coll]
   (lazy-seq
     (when-let [s (seq coll)]
       (let [p (take n s)]
         (if (== n (count p))
           (cons p (partition n step pad (drop step s)))
           (list (take n (concat p pad)))))))))

(defn partition-by [f coll]
  (lazy-seq
   (when-let [s (seq coll)]
     (let [fst  (first s)
           fv   (f fst)
           rst  (take-while (fn [x] (= fv (f x))) (next s))
           run  (cons fst rst)]
       (cons run (partition-by f (seq (drop (count run) s))))))))

(defn tree-seq [branch? children root]
  (let [walk (fn walk [node]
               (lazy-seq
                 (cons node
                   (when (branch? node)
                     (mapcat walk (children node))))))]
    (walk root)))

;; (defn flatten [x]
;;   (filter (fn [x] (not (sequential? x)))
;;           (rest (tree-seq sequential? seq x))))

(defn fnil
  ([f x]
   (fn
     ([a]
      (f (if (nil? a) x a)))
     ([a b]
      (f (if (nil? a) x a) b))
     ([a b c]
      (f (if (nil? a) x a) b c))
     ([a b c & ds]
      (apply f (if (nil? a) x a) b c ds))))
  ([f x y]
   (fn
     ([a b]
      (f (if (nil? a) x a) (if (nil? b) y b)))
     ([a b c]
      (f (if (nil? a) x a) (if (nil? b) y b) c))
     ([a b c & ds]
      (apply f (if (nil? a) x a) (if (nil? b) y b) c ds))))
  ([f x y z]
   (fn
     ([a b]
      (f (if (nil? a) x a) (if (nil? b) y b)))
     ([a b c]
      (f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c)))
     ([a b c & ds]
      (apply f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c) ds)))))

(defn find [coll k]
  (when (and (not (nil? coll))
             (associative? coll)
             (contains? coll k))
    [k (get coll k)]))

(defn get-in
  ([m ks]
   (get-in m ks nil))
  ([m ks not-found]
   (loop [sentinel lookup-sentinel
          out      m
          ks       (seq ks)]
     (if ks
       (if (not (satisfies? ILookup out))
         not-found
         (let [nested (get out (first ks) sentinel)]
           (if (identical? sentinel nested)
             not-found
             (recur sentinel nested (next ks)))))
       out))))

(defn select-keys [map keyseq]
  (loop [ret  (hash-map)
         keys (seq keyseq)]
    (if keys
      (let [key   (first keys)
            entry (get map key ::not-found)]
        (recur
         (if (not= entry ::not-found)
           (assoc ret key entry)
           ret)
         (next keys)))
      (with-meta ret (meta map)))))

(defn assoc-in [m ks v]
  (let [k (first ks)]
    (if-let [ks (next ks)]
      (assoc m k (assoc-in (get m k) ks v))
      (assoc m k v))))

(defn update
  "'Updates' a value in an associative structure, where k is a
  key and f is a function that will take the old value
  and any supplied args and return the new value, and returns a new
  structure.  If the key does not exist, nil is passed as the old value."
  ([m k f]
   (assoc m k (f (get m k))))
  ([m k f x]
   (assoc m k (f (get m k) x)))
  ([m k f x y]
   (assoc m k (f (get m k) x y)))
  ([m k f x y z]
   (assoc m k (f (get m k) x y z)))
  ([m k f x y z & more]
   (assoc m k (apply f (get m k) x y z more))))

(defn update-in
  "'Updates' a value in a nested associative structure, where ks is a
  sequence of keys and f is a function that will take the old value
  and any supplied args and return the new value, and returns a new
  nested structure.  If any levels do not exist, hash-maps will be
  created."
  ([m ks f]
   (let [k (first ks)]
     (if-let [ks (next ks)]
       (assoc m k (update-in (get m k) ks f))
       (assoc m k (f (get m k))))))
  ([m ks f a]
   (let [k (first ks)]
     (if-let [ks (next ks)]
       (assoc m k (update-in (get m k) ks f a))
       (assoc m k (f (get m k) a)))))
  ([m ks f a b]
   (let [k (first ks)]
     (if-let [ks (next ks)]
       (assoc m k (update-in (get m k) ks f a b))
       (assoc m k (f (get m k) a b)))))
  ([m ks f a b c]
   (let [k (first ks)]
     (if-let [ks (next ks)]
       (assoc m k (update-in (get m k) ks f a b c))
       (assoc m k (f (get m k) a b c)))))
  ([m ks f a b c & args]
   (let [k (first ks)]
     (if-let [ks (next ks)]
       (assoc m k (apply update-in (get m k) ks f a b c args))
       (assoc m k (apply f (get m k) a b c args))))))

(defn merge [& maps]
  (when (some identity maps)
    (reduce (fn [m x] (conj (or m {}) x)) maps)))

(defn group-by
  "Returns a map of the elements of coll keyed by the result of
  f on each element. The value at each key will be a vector of the
  corresponding elements, in the order they appeared in coll."
  [f coll]
  (reduce
    (fn [ret x]
      (let [k (f x)]
        (assoc ret k (conj (get ret k []) x))))
    {}
    coll))

(defn max [& xs]
  (loop [xs  xs
         res nil]
    (if-let [x (first xs)]
      (recur (next xs)
             (if (> (or res 0) x)
               res
               x))
      res)))

(def ^:macro doto
  (fn doto [x & forms]
    (let [gx (gensym)]
      `(let* [~gx ~x]
         ~@(map (fn [f]
                  (if (seq? f)
                    `(~(first f) ~gx ~@(next f))
                    `(~f ~gx)))
                forms)
         ~gx))))
