;; -*- mode: clojure; eval: (paredit-mode 1);-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.atom
  (:require
    [torque.lang.protocols :refer :all]
    [torque.lang.boot :refer :all]
    [torque.lang.exceptions :refer :all]
    [torque.lang.def :refer :all]
    [torque.lang.flow :refer :all]
    [torque.lang.let :refer :all]
    [torque.lang.indexed :refer :all]
    [torque.lang.squote :refer :all]
    [torque.lang.predicates :refer :all]
    ;; [torque.lang.algo :refer :all]
    [torque.lang.string :refer :all]))

(deftype Atom [state meta validator watches]

  IPrintable
  (-str [_]
    (str "#<Atom " (str state) ">"))

  IEquiv
  (-equiv [o other] (identical? o other))

  IDeref
  (-deref [_] state)

  IMeta
  (-meta [_] meta)

  ;; IWatchable
  ;; (-notify-watches [this oldval newval]
  ;;   (doseq [[key f] watches]
  ;;     (f key this oldval newval)))
  ;; (-add-watch [this key f]
  ;;   (set! this watches (assoc watches key f))
  ;;   this)
  ;; (-remove-watch [this key]
  ;;   (set! this watches (dissoc watches key)))
  )

(defn atom [x]
  (new Atom x nil nil nil))

(declare assert)

(defn reset! [a new-value]
  (if (instance? Atom a)
    (let [validate (. a validator)]
      (when-not (nil? validate)
        (assert (validate new-value) "Validator rejected reference state"))
      (let [old-value (. a state)]
        (set! a state new-value)
        (when-not (nil? (. a watches))
          (-notify-watches a old-value new-value))
        new-value))
    (-reset! a new-value)))

(defn swap! [a f & more]
  (if (instance? Atom a)
    (reset! a (apply f (. a state) (array-seq more)))
    (-swap! a f more)))
