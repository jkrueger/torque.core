;; -*- mode: clojure;-*-

(ns torque.lang.boot
  (:use
    [torque.lang.protocols]))

(def identical?
  (fn* [x y] (torque.core.builtin/identical? x y)))

(def satisfies?
  (fn* [x y] (torque.core.builtin/satisfies? x y)))

(def type
  (fn* [x] (torque.core.builtin/type x)))

(def instance?
  (fn* [t x] (identical? (type x) t)))

(def =
  (fn* [a b]
    (if (identical? a b)
      true
      (if (satisfies? IEquiv a)
        (-equiv a b)
        false))))

(def nil?
  (fn* [x] (identical? x nil)))

(def not
  (fn* [x] (if x false true)))

(def inc
  (fn* [x] (torque.core.builtin/+ x 1)))

(def seq
  (fn* [x] (if x (-seq x) nil)))

(def with-meta
  (fn* [o meta]
    (if (not (nil? o))
      (-with-meta o meta)
      nil)))

(def meta
  (fn* [o]
    (if (not (nil? o))
      (if (satisfies? IMeta o)
        (-meta o)
        nil)
      nil)))

