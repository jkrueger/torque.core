;; -*- mode: clojure;-*-
;;   Copyright (c) Rich Hickey. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;;   which can be found in the file epl-v10.html at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(ns torque.lang.seq
  (:use
    [torque.lang.protocols]
    [torque.lang.boot]))

(def ^:macro or1
  (fn or1 [a b]
    (list 'let ['or# a]
          (list 'if 'or# 'or# b))))

(def ^:macro and1
  (fn and1 [a b]
    (list 'let ['and# a]
          (list 'if 'and# b 'and#))))

(defn seq? [s]
  (and1 (not (nil? s)) (satisfies? ISeq s)))

(defn empty? [s]
  (or1 (nil? s) (not (seq s))))

(defn first [coll]
  (when-not (nil? coll)
    (if (satisfies? ISeq coll)
      (-first coll)
      (when-let [s (seq coll)]
        (-first s)))))

(defn rest [coll]
  (when-not (nil? coll)
    (if (satisfies? ISeq coll)
      (-rest coll)
      (if-let [s (seq coll)]
        (-rest coll)
        ())
      ())))

(defn nthrest [coll n]
  (loop [i n xs coll]
    (if-let [s (seq xs)]
      (if (pos? i)
        (recur (dec i) (rest xs))
        xs)
      xs)))

(defn next [s]
  (when-not (nil? s)
    (if (satisfies? INext s)
      (-next s)
      (seq (rest s)))))

(defn second [s]
  (first (next s)))

(defn ffirst [s]
  (first (first s)))

(defn nnext [s]
  (next (next s)))

(defn last [coll]
  (let [n (next coll)]
    (if-not (nil? n)
      (recur n)
      (first coll))))
