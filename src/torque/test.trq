(ns torque.test
  (:require [torque.string :as str]))

(def all-tests (atom {}))

(def report (atom {}))

(defn inc-in-report [key]
  (swap! report update key (fnil inc 0)))

(def ^:dynamic *current-test-path* [])

(defn with-added-test-path [f & path]
  (binding [*current-test-path* (apply conj *current-test-path*
                                       path)]
    (f)))

(defmacro deftest [name & body]
  `(let [test-fn# (fn []
                    (inc-in-report :tests)
                    (with-added-test-path (fn []
                                            ~@body)
                      ~(str *ns*)
                      '~name))]
     (def ~name test-fn#)
     (swap! all-tests update (str *ns*) (fnil conj []) test-fn#)
     nil))

(defmacro testing [descr & body]
  `(binding [*current-test-path* (conj *current-test-path*
                                       ~(name descr))]
    ~@body))

(defn check-is [expr res msg]
  (inc-in-report :assertions)
  (when-not res
    (inc-in-report :failures)
    (println "\nTEST FAILURE in"
             (str/join " > "
                       *current-test-path*))
    (when msg
      (println (str " " msg)))
    (println " expected")
    (println " " (str expr))
    (println " to be truthy, but got")
    (println " " (str res))))

(defmacro is
  ([expr]
   `(check-is '~expr ~expr nil))
  ([expr msg]
   `(check-is '~expr ~expr ~msg)))

(defn pluralize [base-str number]
  (if (= number 1)
    base-str
    (str base-str "s")))

(defn print-report []
  (let [test-count (or (:tests @report) 0)
        tests-str (pluralize "test" test-count)
        assertion-count (or (:assertions @report) 0)
        assertions-str (pluralize "assertion" assertion-count)
        failure-count (or (:failures @report) 0)
        failures-str (pluralize "failure" failure-count)]
    (println "\nRan" test-count tests-str
             "with" assertion-count (str assertions-str "\n"))
    (if (pos? failure-count)
      (println failure-count failures-str)
      (println "All tests successful"))
    (println)))

(defn run-all-tests []
  (println "\nRunning tests...")
  (reset! report {})
  (doseq [kv @all-tests]
    (doseq [test (second kv)]
      (test)))
  (print-report))
